{"version":3,"sources":["file:///Users/lijian/Documents/Cocos-ScrollView/assets/scripts/ScrollView.ts"],"names":["_decorator","Component","Node","Prefab","UITransform","Vec3","instantiate","ScrollItem","ccclass","property","ScrollView","items","itemCount","viewHeight","contentStartY","totalDataCount","dataList","lastFirstVisibleIndex","itemDataIndexMap","Map","start","generateMockData","content","parent","getComponent","height","Math","ceil","itemHeight","position","y","contentUI","max","initItems","i","item","scrollItem","addChild","push","updateItemContent","set","update","deltaTime","updateItemPositions","contentY","offsetY","scrollOffset","abs","firstVisibleIndex","floor","length","currentIndex","active","posY","x","currentDataIndex","get","index","data","updateData","context"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, UITransform, Label, Vec3, instantiate } from 'cc';\nimport { ScrollItem, IScrollItemData } from './ScrollItem';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ScrollView')\nexport class ScrollView extends Component {\n\n    @property(Prefab)\n    scrollItem : Prefab = null;\n\n    @property(Node)\n    content : Node = null;\n\n    @property\n    itemHeight: number = 60; // 每个item的高度\n\n    private items: Node[] = []; // 存储创建的item节点\n    private itemCount: number = 0; // 需要创建的item总数\n    private viewHeight: number = 0; // 视口高度\n    private contentStartY: number = 0; // content初始Y位置\n    private totalDataCount: number = 20; // 总数据量\n    private dataList: IScrollItemData[] = []; // 存储所有数据\n    private lastFirstVisibleIndex: number = -1; // 添加这个属性来跟踪上一次的首个可见索引\n    private itemDataIndexMap: Map<Node, number> = new Map(); // 添加新属性跟踪每个item当前显示的数据索引\n\n    start() {\n        // 生成模拟数据\n        this.generateMockData();\n        \n        // 初始化视口相关参数\n        this.viewHeight = this.content.parent.getComponent(UITransform).height;\n        this.itemCount = Math.ceil(this.viewHeight / this.itemHeight) + 1;\n        this.contentStartY = this.content.position.y;\n        \n        // 设置content高度以适应所有数据\n        const contentUI = this.content.getComponent(UITransform);\n        contentUI.height = Math.max(this.totalDataCount * this.itemHeight, this.viewHeight);\n        \n        // 初始化item数据索引映射\n        this.itemDataIndexMap = new Map();\n        \n        // 创建初始item\n        this.initItems();\n    }\n\n    private initItems() {\n        // 创建满足视口显示的item数量\n        for (let i = 0; i < this.itemCount; i++) {\n            const item = instantiate(this.scrollItem);\n            this.content.addChild(item);\n            item.position = new Vec3(0, -i * this.itemHeight, 0);\n            this.items.push(item);\n            this.updateItemContent(item, i);\n            this.itemDataIndexMap.set(item, i);\n        }\n    }\n\n    update(deltaTime: number) {\n        // 检查并更新item位置\n        this.updateItemPositions();\n    }\n\n    private updateItemPositions() {\n        const contentY = this.content.position.y;\n        const offsetY = contentY - this.contentStartY;\n        \n        // 计算实际的滚动偏移量\n        const scrollOffset = Math.abs(offsetY);\n        // 计算当前第一个可见item的索引\n        const firstVisibleIndex = Math.floor(scrollOffset / this.itemHeight);\n        \n        for (let i = 0; i < this.items.length; i++) {\n            const item = this.items[i];\n            const currentIndex = firstVisibleIndex + i;\n            \n            // 检查是否超出数据范围\n            if (currentIndex >= this.totalDataCount) {\n                item.active = false;\n                continue;\n            }\n            \n            item.active = true;\n            // 设置item位置\n            const posY = -currentIndex * this.itemHeight;\n            item.position = new Vec3(item.position.x, posY, 0);\n            \n            // 获取当前item正在显示的数据索引\n            const currentDataIndex = this.itemDataIndexMap.get(item) ?? -1;\n            \n            // 只有当数据索引发生变化时才更新内容\n            if (currentDataIndex !== currentIndex) {\n                this.updateItemContent(item, currentIndex);\n                this.itemDataIndexMap.set(item, currentIndex);\n            }\n        }\n    }\n\n    private updateItemContent(item: Node, index: number) {\n        // 确保索引在有效范围内\n        if (index < 0 || index >= this.totalDataCount) {\n            return;\n        }\n        \n        const data = this.dataList[index];\n        const scrollItem = item.getComponent(ScrollItem);\n        if (scrollItem && data) {\n            scrollItem.updateData(data);\n        }\n    }\n\n    private generateMockData() {\n        // 生成30个模拟数据\n        for (let i = 0; i < 30; i++) {\n            this.dataList.push({\n                context: `这是第${i + 1}条数据内容`\n            });\n        }\n        // 更新总数据量\n        this.totalDataCount = this.dataList.length;\n    }\n}\n\n"]}